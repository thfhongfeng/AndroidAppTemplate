/*
 [key1：[path:"routerPath1", name:"className1",method:[method1Key:"method1",...]], ...]

 生成代码代码文件className1.java
 public interface className1 {
     String method1Key = method1;
     ......
 }

 BuildConfigKey.java中生成代码
 public final static String key1 = valueStr1;
 ......
 public final static HashMap<String, String> getBundleRouterMap() {
    HashMap<String, String> map = new HashMap<>();
    map.put(key1, routerPath1);
    ......
 }
 */
/*

/*
 模块间路由配置，主要方便调用者通过接口常量指定要调用的模块的方法，而不用记住常量内容。
 模块添加对外方法时可选添加，编译时生成类名为name的接口。
 */
def bundleRouterConfig = [
        BUNDLE_WELCOME : [
                path  : "/wel/service",
                name  : "RouterWelcomeCommand",
                method: [
                        checkApkUpdate: "checkApkUpdate",
                ]
        ],
        BUNDLE_LOGIN   : [
                path  : "/login/service", name: "RouterLoginCommand",
                method: [
                        goLoginActivity: "goLoginActivity",
                        autoLogin      : "autoLogin",
                        logout         : "logout",
                        getLoginAccount: "getLoginAccount",
                ]
        ],
        BUNDLE_MAIN    : [
                path  : "/main/service", name: "RouterMainCommand",
                method: [
                        goMainHomeActivity: "goMainHomeActivity",
                ]
        ],
        BUNDLE_USER    : [
                path  : "/user/service", name: "RouterUserCommand",
                method: [
                        goUserHomeActivity    : "goUserHomeActivity",
                        goUserRechargeActivity: "goUserRechargeActivity",
                ]
        ],
        BUNDLE_DB_SEVER: [
                path  : "/db/service", name: "RouterDbServerCommand",
                method: [
                        callDbServerCommand: "callDbServerCommand",
                ]
        ],
        BIZ_BUNDLE_MVC : [
                path  : "/mvc/service", name: "RouterMvcCommand",
                method: [
                        goMvcHomeActivity: "goMvcHomeActivity",
                ]
        ],
        BIZ_BUNDLE_MVP : [
                path  : "/mvp/service", name: "RouterMvpCommand",
                method: [
                        goMvpHomeActivity: "goMvpHomeActivity",
                ]
        ],
        BIZ_BUNDLE_MVVM: [
                path  : "/mvvm/service", name: "RouterMvvmCommand",
                method: [
                        goMvvmHomeActivity: "goMvvmHomeActivity",
                ]
        ],
        BIZ_BUNDLE_FACE: [
                path  : "/face/service", name: "RouterFaceCommand",
                method: [
                        goFaceHomeActivity: "goFaceHomeActivity",
                ]
        ],
]
rootProject.ext.bundleRouterConfig = bundleRouterConfig
rootProject.ext.build_all_bundle = {
    def bundle = []
    if (bundleRouterConfig) {
        bundleRouterConfig.each { key, value ->
            bundle.add("\"${key}\"")
        }
    }
    return bundle
}