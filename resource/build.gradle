apply plugin: 'com.android.library'

android {
    compileSdkVersion build_versions.compileSdkVersion
    buildToolsVersion build_versions.buildToolsVersion

    defaultConfig {
        minSdkVersion build_versions.minSdkVersion
        targetSdkVersion build_versions.targetSdkVersion

        manifestPlaceholders = [baidu_for_app_key: app_key.baidu_for_app_key]

        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"

        //必须要保证所有的flavor 都属于同一个维度
        flavorDimensions "default"
    }

    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
    }

    productFlavors {
        common {
            versionCode build_product_versionCode.common
            versionName build_product_versionName.common

            manifestPlaceholders = [app_name: build_product_appName.common]
        }
        huawei {
            versionCode build_product_versionCode.huawei
            versionName build_product_versionName.huawei

            manifestPlaceholders = [app_name: build_product_appName.huawei]
        }
        xiaomi {
            versionCode build_product_versionCode.xiaomi
            versionName build_product_versionName.xiaomi

            manifestPlaceholders = [app_name: build_product_appName.xiaomi]
        }
    }

    resourcePrefix "res_"
}

repositories {
    flatDir {
        dirs 'libs'
    }
}

dependencies {
    implementation fileTree(dir: 'libs', include: ['*.jar'])

    // 测试 dependency begin
    androidTestImplementation(build_dependency["test_espresso_core"], {
        exclude group: 'com.android.support', module: 'support-annotations'
    })
    testImplementation build_dependency["test_junit"]
    // 测试 dependency end

    // android官方 dependency begin
    api build_dependency["android_appcompat"]
    api build_dependency["android_constraint_layout"]
    // android官方 dependency end

    // 公共工具模块 begin
    api project(':tool')
    // 公共工具模块 end
}
