apply plugin: 'com.android.library'

android {
    compileSdkVersion build_versions.compileSdkVersion
    buildToolsVersion build_versions.buildToolsVersion

    defaultConfig {
        minSdkVersion build_versions.minSdkVersion
        targetSdkVersion build_versions.targetSdkVersion

        manifestPlaceholders = [baidu_for_app_key: app_key.baidu_for_app_key]

        testInstrumentationRunner "android.support.test.runner.AndroidJUnitRunner"

        //必须要保证所有的flavor 都属于同一个维度
        flavorDimensions "default"
    }

    dataBinding {
        enabled = true
    }

    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
    }

    productFlavors {
        common {
            versionCode build_product_versionCode.common
            versionName build_product_versionName.common

            manifestPlaceholders = [app_name: build_product_appName.common]
        }
        huawei {
            versionCode build_product_versionCode.huawei
            versionName build_product_versionName.huawei

            manifestPlaceholders = [app_name: build_product_appName.huawei]
        }
        xiaomi {
            versionCode build_product_versionCode.xiaomi
            versionName build_product_versionName.xiaomi

            manifestPlaceholders = [app_name: build_product_appName.xiaomi]
        }
    }

    sourceSets {
        main {
            res.srcDirs += [
                    'src/main/res/layouts/activity',
                    'src/main/res/layouts/fragment',
                    'src/main/res/layouts/widget',
                    'src/main/res/layouts/dialog',
                    'src/main/res/layouts/item'
            ]
            java.srcDirs = ['src/main/java']
            jniLibs.srcDir 'libs'
            jni.srcDirs = []    //disable automatic ndk-build
        }
    }

    resourcePrefix "base_"
}

repositories {
    flatDir {
        dirs 'libs'
    }
}

dependencies {
    implementation fileTree(dir: 'libs', include: ['*.jar'])

    // 第三方 dependency begin
    api build_dependency["aigestudio_wheelpicker"]
    api build_dependency['safewebviewbridge']
    api build_dependency['bumptech_glide']
    annotationProcessor build_dependency['bumptech_glide_compiler']
    api(name: build_dependency["sina_weibo_sdk"], ext: 'aar')
    annotationProcessor build_dependency["android_room_compiler"]
    // CWAC-SafeRoom: A Room<->SQLCipher for Android Bridge
    // 腾讯WCDB: A Room<->SQLCipher for Android Bridge
    api build_dependency["tencent_wcdb_room"]
    // 第三方 dependency end

    // library project begin
    api project(':base_lib_immersionbar')
    // library project end

    // 路由模块 begin
    api project(':config')
    // 路由模块 end
}
