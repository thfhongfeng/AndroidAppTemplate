plugins {
    id 'com.android.application'
    id 'maven-publish'
}

android {
    compileSdk build_versions.compileSdkVersion

    defaultConfig {
        minSdk build_versions.minSdkVersion
        targetSdk build_versions.targetSdkVersion

        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
        //必须要保证所有的flavor 都属于同一个维度
        flavorDimensions "default"
    }

    buildFeatures {
        dataBinding = true
    }

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_11
        targetCompatibility JavaVersion.VERSION_11
    }

    productFlavors {
        build_flavor_product.each { flavorName, _ ->
            "$flavorName" {
                applicationId build_flavor_product[flavorName].build_product_applicationId
                versionCode build_flavor_product[flavorName].build_product_versionCode
                versionName build_flavor_product[flavorName].build_product_versionName
            }
        }
    }
    signingConfigs {
        build_flavor_product.each { flavorName, _ ->
            "$flavorName" {
                storeFile file(build_flavor_product[flavorName].build_product_storeFile)
                storePassword build_flavor_product[flavorName].build_product_storePassword
                keyAlias build_flavor_product[flavorName].build_product_keyAlias
                keyPassword build_flavor_product[flavorName].build_product_keyPassword
            }
        }
    }

    // 将签名配置应用到各个 productFlavors
    productFlavors.all { flavor ->
        signingConfig signingConfigs[flavor.name]
    }

    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }
        debug {
            minifyEnabled false
            initWith(buildTypes.release)
            // 使用了initWith，需要在之后覆盖debug特有的属性
            debuggable true
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }
    }

    applicationVariants.all { variant ->
        def buildTypeName = variant.buildType.name
        String timeTag = ""
        if (!"debug".equalsIgnoreCase(buildTypeName)) {
            timeTag = "-${releaseTime()}"
        }
        variant.outputs.all {
            outputFileName = "${build_versions.apkHeadName}-${variant.flavorName}-${variant.versionCode}${timeTag}.apk"
        }
    }
}

static def releaseTime() {
    return new Date().format("yyyyMMddHHmm", TimeZone.getTimeZone("GMT+8"))
}

dependencies {
    android.applicationVariants.all { variant ->
        // 获取当前 variant 的 flavor 名称
        def flavorName = variant.flavorName

        // 资源模块 begin
        "${flavorName}Implementation" rootProject.ext.dependencyCustom("resource", flavorName)
        // 资源模块 end

        // 入口模块 begin
        "${flavorName}Implementation" rootProject.ext.dependencyCustom("app_welcome", flavorName)
        // 入口模块 end

        // bundle模块 begin
        "${flavorName}Implementation" rootProject.ext.dependencyCustom("bundle_login", flavorName)
        "${flavorName}Implementation" rootProject.ext.dependencyCustom("bundle_main", flavorName)
        "${flavorName}Implementation" rootProject.ext.dependencyCustom("bundle_user", flavorName)

        "${flavorName}Implementation" rootProject.ext.dependencyCustom("db_server", flavorName)
        // bundle模块 begin

        // biz_bundle模块 begin
        build_flavor_product[flavorName].build_product_biz_bundle_module.each { moduleKey, moduleValue ->
            "${flavorName}Implementation" rootProject.ext.dependencyCustom(moduleValue, flavorName)
        }
        // biz_bundle模块 end
    }
}

afterEvaluate {
    publishing {
        android.applicationVariants.all { variant ->
            if (variant.buildType.name == 'release') {
                def productType = variant.flavorName
                def publicationName = "${productType}"
                def component = components.findByName("${variant.name}_apk")
                if (component != null) {
                    publishing.publications.create(publicationName, MavenPublication) {
                        from component
                        groupId = build_flavor_product[productType].build_product_groupId
                        artifactId = build_flavor_product[productType].build_product_appName
                        version = build_flavor_product[productType].build_product_versionName
                    }
                }
            }
        }

        repositories {
            maven {
                url "file:///D:/PineProducts"
            }
        }
    }

    // 将发布任务添加到自定义组
    tasks.named('publish') {
        group = 'private'
    }
}