apply plugin: 'com.android.application'

def apVersion = getEnvValue("apVersion", "");

android {
    compileSdkVersion build_versions.compileSdkVersion
    buildToolsVersion build_versions.buildToolsVersion
    signingConfigs {
        release {
            storeFile file(build_versions.storeFile)
            storePassword build_versions.storePassword
            keyAlias build_versions.keyAlias
            keyPassword build_versions.keyPassword
        }
    }
    defaultConfig {
        applicationId build_versions.applicationId
        minSdkVersion build_versions.minSdkVersion
        targetSdkVersion build_versions.targetSdkVersion
        versionCode build_versions.versionCode
        versionName build_versions.versionName

        manifestPlaceholders = [app_name: build_versions.app_name]

        testInstrumentationRunner "android.support.test.runner.AndroidJUnitRunner"
    }

    dataBinding {
        enabled = true
    }

    buildTypes {
        release {
            signingConfig signingConfigs.release
            minifyEnabled false
            debuggable false
            shrinkResources false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }

        debug {

        }
    }

    applicationVariants.all { variant ->
        variant.outputs.all {
            // 显示app名称+当前版本号
            def fileName = "${build_versions.apk_head_name}-V${variant.versionName}"
//                // 加入打包时间
//                fileName = fileName + "-${releaseTime()}"
            // 如果是debug版本，加入beta版本号
            if ('debug'.equals(variant.buildType.name)) {
                fileName = fileName + "-beta.apk"
            } else {
                // 如果是release版本，直接显示
                fileName = fileName + "-release.apk"
            }
            outputFileName = fileName
        }
    }
}

//// 显示的时间格式，形如20171110
//def releaseTime() {
//    return new Date().format("yyyyMMdd", TimeZone.getDefault());
//}

// 获取执行gradle命令时的运行参数
String getEnvValue(key, defValue) {
    def val = System.getProperty(key);
    if (null != val) {
        return val;
    }
    val = System.getenv(key);
    if (null != val) {
        return val;
    }
    return defValue;
}

repositories {
    flatDir {
        dirs 'libs', '../base/libs'
    }
}

dependencies {
    implementation fileTree(dir: 'libs', include: ['*.jar'])

    // 主体基础模块 begin
    api project(':base')
    // 主体基础模块 end

    // 入口模块 begin
    implementation project(':app_welcome')
    // 入口模块 end

    // bundle模块 begin
    implementation project(':bundle_login')
    implementation project(':bundle_main')
    implementation project(':bundle_user')

    implementation project(':bundle_business_mvc')
    implementation project(':bundle_business_mvp')
    implementation project(':bundle_business_mvvm')
    implementation project(':bundle_business_demo')
    // bundle模块 end

    implementation project(':db_server')
}

// 下面的代码会引起：
// Deprecated Gradle features were used in this build, making it incompatible with Gradle 5.0.
// 以后解决
apply plugin: 'maven'
apply plugin: 'maven-publish'

publishing {
    repositories {
        mavenLocal()
    }
}

publishing {
    publications {
        maven(MavenPublication) {
            artifact "${project.buildDir}/outputs/apk/${project.name}-debug.ap"
            artifactId "AP-debug"
        }
    }
}