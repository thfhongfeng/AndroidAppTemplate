plugins {
    id 'com.android.library'
    id 'maven-publish'
}
apply from: "${rootDir}/gradleWorker/task/GenerateFileTask.gradle"
apply from: "${rootDir}/gradleWorker/task/PublishTask.gradle"

android {
    compileSdkVersion build_versions.compileSdkVersion

    defaultConfig {
        minSdkVersion build_versions.minSdkVersion
        targetSdkVersion build_versions.targetSdkVersion

        manifestPlaceholders = [baidu_for_app_key: app_key.baidu_for_app_key,
                                gaode_for_app_key: app_key.gaode_for_app_key]

        buildConfigField "String", "WEI_BO_REDIRECT_URL", "\"${app_url.wei_bo_secret_key}\""

        buildConfigField "String", "QQ_FOR_APP_ID", "\"${app_key.qq_for_app_id}\""
        buildConfigField "String", "WX_FOR_APP_ID", "\"${app_key.wx_for_app_id}\""
        buildConfigField "String", "WX_SECRET_KEY", "\"${app_key.wx_secret_key}\""
        buildConfigField "String", "WEI_BO_FOR_APP_KEY", "\"${app_key.wei_bo_for_app_key}\""
        buildConfigField "String", "WEI_BO_SECRET_KEY", "\"${app_key.wei_bo_secret_key}\""

        buildConfigField "String", "APP_THIRD_ROUTER_PROVIDER", "\"${app_third_sdk_provider.router_provider}\""
        buildConfigField "String", "APP_THIRD_MAP_PROVIDER", "\"${app_third_sdk_provider.map_provider}\""
        buildConfigField "String", "APP_THIRD_IMAGE_LOADER_PROVIDER", "\"${app_third_sdk_provider.image_loader_provider}\""
        buildConfigField "String", "APP_THIRD_HTTP_REQUEST_PROVIDER", "\"${app_third_sdk_provider.http_request_provider}\""
        buildConfigField "String", "APP_THIRD_DATA_SOURCE_PROVIDER", "\"${app_third_sdk_provider.data_source_provider}\""
        buildConfigField "String", "APP_THIRD_SCAN_PROVIDER", "\"${app_third_sdk_provider.scan_provider}\""

        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"

        //必须要保证所有的flavor 都属于同一个维度
        flavorDimensions "default"
    }

    buildFeatures {
        dataBinding = true
    }

    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }

        debug {

        }
    }

    productFlavors {
        build_flavor_product.each { flavorName, _ ->
            "$flavorName" {
                buildConfigField "String", "APP_NAME_ID", "\"${build_flavor_product[flavorName].build_product_appName}\""
                buildConfigField "String[]", "BUILD_ALL_BUNDLE", "{${build_all_bundle().join(',')}}"
                buildConfigField "String[]", "BUILD_BIZ_BUNDLE", "{${build_biz_bundle(flavorName).join(',')}}"
            }
        }
    }

    sourceSets {
        main {
            jniLibs.srcDir 'libs'
        }
    }
}

dependencies {
    implementation fileTree(dir: 'libs', include: ['*.jar'])

    // 第三方 dependency begin
    annotationProcessor build_dependency["android_room_compiler"]
    api build_dependency["android_room_runtime"]
    // CWAC-SafeRoom: A Room<->SQLCipher for Android Bridge
    // 腾讯WCDB: A Room<->SQLCipher for Android Bridge
    api build_dependency["tencent_wcdb_room"]
    api build_dependency["tencent_wcdb_android"]
    // 第三方 dependency end

    // 基础模块 begin
    api rootProject.ext.dependencyCustom("base", "")
    // 基础模块 end
}
